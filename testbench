`timescale 1ns/1ps

module test_fifo; //no ports
  reg clk,reset;
  reg wr_en,rd_en;
  reg [7:0]din;
  wire [7:0]dout;
  wire full,empty;
  
  fifo  UUT(clk,reset,wr_en,rd_en,din,dout,full,empty); //instantiation
  
  initial begin
    clk=0;
    $display("Clock initialize-------");
  end
  
  task rst;
    begin
      #10 reset=1;
      $display("reset initialize---------");
      #20 reset=0;
    end
  endtask
  
  always #5 clk=~clk;//10 ns timeperiod i.e. 100 MHz
  
  task wr_rd_init;
    begin
      wr_en = 0;
      rd_en = 0;
      din = 0;
      $display("write read initialize------");
    end
  endtask
  ///write process
  task write;
    input [7:0]wdata;
    begin
      @(posedge clk) // write only at positive edge of the clock
      begin
        wr_en = 1;
      	din = wdata;
      end            
    end    
  endtask
  
  //we need 16 databytes so that we get a full signal in the FIFO
  // For that we need another task
  
  task write16;
    begin
      write(8'hf0);
      write(8'hf1);
      write(8'hf2);
      write(8'hf3);
      write(8'hf4);
      write(8'hf5);
      write(8'hf6);
      write(8'hf7);
      write(8'hf8);
      write(8'hf9);
      write(8'hfa);
      write(8'hfb);
      write(8'hfc);
      write(8'hfd);
      write(8'hfe);
      write(8'hff);      
    end
  endtask
  task endwrite;
    wr_en = 0;
  endtask
  
  //read process
  task read;
    begin
      @(posedge clk)
      	rd_en = 1;
    end
  endtask
  
  //we need 16 reads
  task read16;
    begin
      read;  // read task called
      read;
      read;
      read;
      read;
      read;
      read;
      read;
      read;
      read;
      read;
      read;
      read;
      read;
      read;
      read;
    end
  endtask
  
  task endread;
    begin 
      @(posedge clk)
      	rd_en=0;
    end
  endtask
   
  //THus we have prepared all the tasks and now comes the initial process
  
  initial begin
    $display("start------");
    rst; // reset task run
    write16;  //16 times write takes place
  	endwrite;
    #2 
    read16;
    #10
  	endread;
    #10 $stop;    //stop the simulation
    $display("stopped---");
  end 
   
  //for waveform generation, we need some extra codes
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars(1,test_fifo); //test_fifo is the TB
  end
   
endmodule
